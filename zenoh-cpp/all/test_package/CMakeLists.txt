cmake_minimum_required(VERSION 3.16)
project(test_package LANGUAGES CXX)

find_package(zenohcpp REQUIRED CONFIG)

add_executable(${PROJECT_NAME} test_package.cxx)
if(${ZENOHCXX_LIB} STREQUAL "zenohc")
    target_link_libraries(${PROJECT_NAME} PRIVATE zenohcxx::zenohc::lib)
    add_compile_definitions(ZENOHCXX_ZENOHC)
elseif(${ZENOHCXX_LIB} STREQUAL "zenohpico")
    target_link_libraries(${PROJECT_NAME} PRIVATE zenohcxx::zenohpico)
    add_compile_definitions(ZENOHCXX_ZENOHPICO)
    # Zenoh-Pico definitions
    if(CMAKE_SYSTEM_NAME MATCHES "Linux")
        add_compile_definitions(ZENOH_LINUX)
    elseif(POSIX_COMPATIBLE)
        add_compile_definitions(ZENOH_LINUX)
    elseif(CMAKE_SYSTEM_NAME MATCHES "BSD")
        add_compile_definitions(ZENOH_BSD)
    elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
        add_compile_definitions(ZENOH_MACOS)
    elseif(CMAKE_SYSTEM_NAME MATCHES "Emscripten")
        add_compile_definitions(ZENOH_EMSCRIPTEN)
    elseif(CMAKE_SYSTEM_NAME MATCHES "Windows")
        add_compile_definitions(ZENOH_WINDOWS)
        add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
        add_compile_definitions(ZENOH_NO_STDATOMIC)
    elseif(CMAKE_SYSTEM_NAME MATCHES "Generic")
        if(WITH_ZEPHYR)
            add_compile_definitions(ZENOH_ZEPHYR)
        elseif(WITH_FREERTOS_PLUS_TCP)
            add_compile_definitions(ZENOH_FREERTOS_PLUS_TCP)
        endif()
    endif()
else()
    message(FATAL_ERROR "ZENOHCXX_LIB must be either 'zenohc' or 'zenohpico'")
endif()

target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17)